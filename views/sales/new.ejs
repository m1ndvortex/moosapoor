<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>صدور فاکتور جدید - <%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/persian-date@latest/dist/persian-date.min.js"></script>
</head>
<body>
    <div class="container">
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger">
                <strong>خطا:</strong> <%= error %>
            </div>
        <% } %>

        <div class="page-header">
            <h1 class="page-title">صدور فاکتور جدید</h1>
            <p>فاکتور خرید یا فروش جدید با قیمت‌گذاری دستی ایجاد کنید</p>
        </div>

        <form id="invoiceForm" method="POST" action="/sales/create">
            <!-- Customer Selection -->
            <div class="card">
                <div class="card-header">
                    انتخاب مشتری و اطلاعات فاکتور
                </div>
                <div class="card-body">
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 20px;">
                        <div class="form-group">
                            <label for="invoice_type" class="form-label">نوع فاکتور *</label>
                            <select id="invoice_type" name="invoice_type" class="form-control" required onchange="toggleInvoiceType()">
                                <option value="sale" selected>فاکتور فروش</option>
                                <option value="purchase">فاکتور خرید</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="customer_id" class="form-label">مشتری *</label>
                            <select id="customer_id" name="customer_id" class="form-control" required onchange="loadCustomerFinancialInfo()">
                                <option value="">انتخاب مشتری</option>
                                <% customers.forEach(customer => { %>
                                    <option value="<%= customer.id %>" <%= (typeof formData !== 'undefined' && formData && formData.customer_id == customer.id) ? 'selected' : '' %>>
                                        <%= customer.customer_code %> - <%= customer.full_name %>
                                    </option>
                                <% }) %>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="invoice_date_shamsi" class="form-label">تاریخ فاکتور (شمسی) *</label>
                            <input type="text" id="invoice_date_shamsi" name="invoice_date_shamsi" class="form-control" 
                                   value="<%= (typeof formData !== 'undefined' && formData && formData.invoice_date_shamsi) ? formData.invoice_date_shamsi : '' %>" 
                                   placeholder="1403/01/01" required>
                            <input type="hidden" id="invoice_date" name="invoice_date" 
                                   value="<%= (typeof formData !== 'undefined' && formData && formData.invoice_date) ? formData.invoice_date : new Date().toISOString().split('T')[0] %>">
                        </div>

                        <div class="form-group">
                            <label for="daily_gold_rate" class="form-label">نرخ طلای روز (ریال در گرم) *</label>
                            <input type="number" id="daily_gold_rate" name="daily_gold_rate" class="form-control" 
                                   value="<%= (typeof formData !== 'undefined' && formData && formData.daily_gold_rate) ? formData.daily_gold_rate : (goldRate || 3500000) %>" 
                                   required placeholder="مثال: 3500000">
                        </div>
                    </div>

                    <!-- Customer Financial Info -->
                    <div id="customer-financial-info" style="display: none; margin-top: 20px; padding: 15px; border: 2px solid #e9ecef; border-radius: 8px; background-color: #f8f9fa;">
                        <h5 style="margin-bottom: 15px; color: #495057;">وضعیت مالی مشتری</h5>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                            <div class="customer-balance-info">
                                <label class="form-label">وضعیت حساب:</label>
                                <div id="customer-balance-display" class="balance-display">
                                    <span class="balance-amount">0</span>
                                    <span class="balance-status">تسویه</span>
                                </div>
                            </div>
                            <div class="customer-totals-info">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                                    <span>کل خریدها:</span>
                                    <span id="customer-total-purchases">0 ریال</span>
                                </div>
                                <div style="display: flex; justify-content: space-between;">
                                    <span>کل پرداختی‌ها:</span>
                                    <span id="customer-total-payments">0 ریال</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Items Selection -->
            <div class="card">
                <div class="card-header">
                    انتخاب کالاها و قیمت‌گذاری
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="item_search" class="form-label">جستجو و انتخاب کالا</label>
                        <select id="item_search" class="form-control">
                            <option value="">انتخاب کالا برای افزودن</option>
                            <% items.forEach(item => { %>
                                <% if (item.current_quantity > 0) { %>
                                    <option value="<%= item.id %>" 
                                            data-name="<%= item.item_name %>"
                                            data-code="<%= item.item_code %>"
                                            data-carat="<%= item.carat %>"
                                            data-category="<%= item.category_name || 'بدون دسته' %>"
                                            data-subcategory="<%= item.subcategory_name || '' %>"
                                            data-stock="<%= item.current_quantity %>">
                                        <% if (item.subcategory_name) { %>
                                            [<%= item.subcategory_name %>] <%= item.category_name %> - <%= item.carat %> عیار - موجودی: <%= item.current_quantity %>
                                        <% } else { %>
                                            [<%= item.category_name || 'بدون دسته' %>] <%= item.item_name %> - <%= item.carat %> عیار - موجودی: <%= item.current_quantity %>
                                        <% } %>
                                    </option>
                                <% } else { %>
                                    <option value="" disabled style="color: #999; background-color: #f5f5f5;">
                                        <% if (item.subcategory_name) { %>
                                            [<%= item.subcategory_name %>] <%= item.category_name %> - <%= item.carat %> عیار - ناموجود
                                        <% } else { %>
                                            [<%= item.category_name || 'بدون دسته' %>] <%= item.item_name %> - <%= item.carat %> عیار - ناموجود
                                        <% } %>
                                    </option>
                                <% } %>
                            <% }) %>
                        </select>
                    </div>

                    <!-- Selected Items Table -->
                    <div id="selectedItemsContainer" style="margin-top: 20px;">
                        <h4>کالاهای انتخاب شده</h4>
                        <div class="table-container">
                            <table class="table" id="selectedItemsTable">
                                <thead>
                                    <tr>
                                        <th>کالا</th>
                                        <th>عیار</th>
                                        <th>تعداد</th>
                                        <th>وزن (گرم)</th>
                                        <th>اجرت (%)</th>
                                        <th>سود (%)</th>
                                        <th>مالیات (%)</th>
                                        <th>قیمت نهایی</th>
                                        <th>عملیات</th>
                                    </tr>
                                </thead>
                                <tbody id="selectedItemsBody">
                                    <!-- Selected items will be added here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Invoice Totals -->
            <div class="card">
                <div class="card-header">
                    جمع‌بندی فاکتور
                </div>
                <div class="card-body">
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 20px;">
                        <div class="form-group">
                            <label class="form-label">مجموع وزن (گرم)</label>
                            <input type="number" step="0.001" id="total_weight" name="total_weight" class="form-control" readonly>
                        </div>

                        <div class="form-group">
                            <label class="form-label">مجموع اجرت (ریال)</label>
                            <input type="number" id="total_labor" name="total_labor" class="form-control" readonly>
                        </div>

                        <div class="form-group">
                            <label class="form-label">مجموع سود (ریال)</label>
                            <input type="number" id="total_profit" name="total_profit" class="form-control" readonly>
                        </div>

                        <div class="form-group">
                            <label class="form-label">مجموع مالیات (ریال)</label>
                            <input type="number" id="total_tax" name="total_tax" class="form-control" readonly>
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 20px; margin-top: 15px;">
                        <div class="form-group">
                            <label class="form-label">مجموع کل (ریال)</label>
                            <input type="number" id="subtotal" name="subtotal" class="form-control" readonly>
                        </div>

                        <div class="form-group">
                            <label for="discount_amount" class="form-label">تخفیف (ریال)</label>
                            <input type="number" id="discount_amount" name="discount_amount" class="form-control" 
                                   value="<%= (typeof formData !== 'undefined' && formData && formData.discount_amount) ? formData.discount_amount : 0 %>" 
                                   onchange="calculateTotals()">
                        </div>

                        <div class="form-group">
                            <label for="plastic_weight" class="form-label">وزن پولاستیک (گرم)</label>
                            <input type="number" step="0.001" id="plastic_weight" name="plastic_weight" 
                                   class="form-control" 
                                   value="<%= (typeof formData !== 'undefined' && formData && formData.plastic_weight) ? formData.plastic_weight : 0 %>" 
                                   onchange="calculateTotals()">
                        </div>

                        <div class="form-group">
                            <label class="form-label">حساب نهایی (ریال)</label>
                            <input type="number" id="grand_total" name="grand_total" class="form-control" readonly>
                        </div>
                    </div>

                    <div style="display: grid; grid-template-columns: 1fr; gap: 20px; margin-top: 15px;">
                        <div class="form-group">
                            <label for="notes" class="form-label">یادداشت</label>
                            <textarea id="notes" name="notes" class="form-control" rows="2" 
                                      placeholder="یادداشت اختیاری برای فاکتور"><%= (typeof formData !== 'undefined' && formData && formData.notes) ? formData.notes : '' %></textarea>
                        </div>
                    </div>

                    <div style="margin-top: 30px; text-align: center;">
                        <button type="submit" class="btn btn-primary" style="margin-left: 10px;">
                            صدور فاکتور
                        </button>
                        <a href="/sales" class="btn btn-secondary">
                            انصراف
                        </a>
                    </div>
                </div>
            </div>

            <!-- Hidden input for selected items -->
            <input type="hidden" id="selected_items_data" name="selected_items">
        </form>
    </div>

    <script>
        let selectedItems = [];
        let itemCounter = 0;

        // Persian date conversion functions
        function shamsiToGregorian(shamsiDate) {
            try {
                const parts = shamsiDate.split('/');
                if (parts.length !== 3) return null;
                
                const year = parseInt(parts[0]);
                const month = parseInt(parts[1]);
                const day = parseInt(parts[2]);
                
                // Create a Persian date and convert to Gregorian
                const pDate = new persianDate([year, month, day]);
                return pDate.toDate();
            } catch (e) {
                return null;
            }
        }

        function gregorianToShamsi(gregorianDate) {
            try {
                const pDate = new persianDate(gregorianDate);
                return pDate.format('YYYY/MM/DD');
            } catch (e) {
                return '';
            }
        }

        // Initialize Persian date
        document.addEventListener('DOMContentLoaded', function() {
            const shamsiInput = document.getElementById('invoice_date_shamsi');
            const gregorianInput = document.getElementById('invoice_date');
            
            // Set today's date in Shamsi if not already set
            if (!shamsiInput.value) {
                const today = new Date();
                shamsiInput.value = gregorianToShamsi(today);
            }
            
            // Convert Shamsi to Gregorian when Shamsi date changes
            shamsiInput.addEventListener('change', function() {
                const gregorianDate = shamsiToGregorian(this.value);
                if (gregorianDate) {
                    gregorianInput.value = gregorianDate.toISOString().split('T')[0];
                }
            });
        });

        // Add item to invoice
        document.getElementById('item_search').addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (!selectedOption.value) return;
            
            const stock = parseInt(selectedOption.dataset.stock || 0);
            
            // Check if item is already added
            const existingItem = selectedItems.find(item => item.id === selectedOption.value);
            if (existingItem) {
                if (existingItem.quantity >= stock) {
                    alert(`این کالا قبلاً اضافه شده و موجودی آن (${stock}) تمام شده است.`);
                    this.selectedIndex = 0;
                    return;
                }
                // If already exists, just increase quantity
                updateQuantity(existingItem.tableId, existingItem.quantity + 1);
                this.selectedIndex = 0;
                return;
            }
            
            if (stock <= 0) {
                alert('این کالا موجود نیست!');
                this.selectedIndex = 0;
                return;
            }
            
            const itemData = {
                id: selectedOption.value,
                name: selectedOption.dataset.name,
                code: selectedOption.dataset.code,
                carat: parseInt(selectedOption.dataset.carat),
                category: selectedOption.dataset.category,
                subcategory: selectedOption.dataset.subcategory,
                stock: stock,
                quantity: 1,
                weight: 0, // Manual input
                laborPercentage: 0, // Percentage-based labor cost
                profitPercentage: 0, // Percentage-based profit
                taxPercentage: 0, // Percentage-based tax
                totalPrice: 0,
                tableId: ++itemCounter
            };
            
            addItemToTable(itemData);
            this.selectedIndex = 0; // Reset selection
        });

        function addItemToTable(item) {
            selectedItems.push(item);
            
            const tbody = document.getElementById('selectedItemsBody');
            const row = tbody.insertRow();
            
            row.innerHTML = `
                <td>
                    <strong>${item.code}</strong><br>
                    <small>${item.subcategory ? '[' + item.subcategory + '] ' + item.category : (item.category ? '[' + item.category + '] ' + item.name : item.name)}</small><br>
                    <span class="stock-info">موجودی: ${item.stock}</span>
                </td>
                <td>${item.carat} عیار</td>
                <td>
                    <input type="number" min="1" max="${item.stock}" value="${item.quantity}" 
                           onchange="updateQuantity(${item.tableId}, this.value)"
                           class="quantity-input" style="width: 70px;">
                </td>
                <td>
                    <input type="number" step="0.001" min="0" value="${item.weight}" 
                           onchange="updateWeight(${item.tableId}, this.value)"
                           class="weight-input" style="width: 80px;" placeholder="0.000">
                </td>
                <td>
                    <input type="number" min="0" max="100" step="0.1" value="${item.laborPercentage}" 
                           onchange="updateLaborPercentage(${item.tableId}, this.value)"
                           class="labor-input" style="width: 80px;" placeholder="0">
                    <small style="display: block; color: #666;">درصد</small>
                </td>
                <td>
                    <input type="number" min="0" max="100" step="0.1" value="${item.profitPercentage}" 
                           onchange="updateProfitPercentage(${item.tableId}, this.value)"
                           class="profit-input" style="width: 80px;" placeholder="0">
                    <small style="display: block; color: #666;">درصد</small>
                </td>
                <td>
                    <input type="number" min="0" max="100" step="0.1" value="${item.taxPercentage}" 
                           onchange="updateTaxPercentage(${item.tableId}, this.value)"
                           class="tax-input" style="width: 80px;" placeholder="0">
                    <small style="display: block; color: #666;">درصد</small>
                </td>
                <td id="total-${item.tableId}" class="price-cell">0 ریال</td>
                <td>
                    <button type="button" onclick="removeItem(${item.tableId})" class="btn btn-sm btn-danger">
                        حذف
                    </button>
                </td>
            `;
            
            calculateItemPrice(item.tableId);
            updateTotals();
        }

        function updateQuantity(tableId, newQuantity) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                const quantity = Math.max(1, Math.min(parseInt(newQuantity) || 1, item.stock));
                item.quantity = quantity;
                
                // Update input field
                const input = document.querySelector(`input[onchange*="updateQuantity(${tableId}"]`);
                if (input) input.value = quantity;
                
                calculateItemPrice(tableId);
                updateTotals();
            }
        }

        function updateWeight(tableId, newWeight) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                item.weight = parseFloat(newWeight) || 0;
                calculateItemPrice(tableId);
                updateTotals();
            }
        }

        function updateLaborPercentage(tableId, newLaborPercentage) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                item.laborPercentage = parseFloat(newLaborPercentage) || 0;
                calculateItemPrice(tableId);
                updateTotals();
            }
        }

        function updateProfitPercentage(tableId, newProfitPercentage) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                item.profitPercentage = parseFloat(newProfitPercentage) || 0;
                calculateItemPrice(tableId);
                updateTotals();
            }
        }

        function updateTaxPercentage(tableId, newTaxPercentage) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                item.taxPercentage = parseFloat(newTaxPercentage) || 0;
                calculateItemPrice(tableId);
                updateTotals();
            }
        }

        function calculateItemPrice(tableId) {
            const item = selectedItems.find(i => i.tableId === tableId);
            if (item) {
                const dailyGoldRate = parseFloat(document.getElementById('daily_gold_rate').value) || 0;
                
                if (item.weight <= 0) {
                    item.totalPrice = 0;
                } else {
                    // Calculate per-gram costs based on percentages of gold rate
                    const laborCostPerGram = dailyGoldRate * (item.laborPercentage / 100);
                    const profitCostPerGram = dailyGoldRate * (item.profitPercentage / 100);
                    const taxCostPerGram = dailyGoldRate * (item.taxPercentage / 100);
                    
                    // Total cost per gram = gold rate + labor + profit + tax
                    const totalCostPerGram = dailyGoldRate + laborCostPerGram + profitCostPerGram + taxCostPerGram;
                    
                    // Final price = weight × total cost per gram × quantity
                    item.totalPrice = item.weight * totalCostPerGram * item.quantity;
                    
                    // Store calculated values for database
                    item.calculatedLaborCost = laborCostPerGram * item.weight * item.quantity;
                    item.calculatedProfitCost = profitCostPerGram * item.weight * item.quantity;
                    item.calculatedTaxCost = taxCostPerGram * item.weight * item.quantity;
                }
                
                const totalCell = document.getElementById(`total-${tableId}`);
                if (totalCell) {
                    totalCell.textContent = formatNumber(Math.round(item.totalPrice)) + ' ریال';
                }
            }
        }

        function removeItem(tableId) {
            selectedItems = selectedItems.filter(i => i.tableId !== tableId);
            
            // Remove row from table
            const rows = document.getElementById('selectedItemsBody').rows;
            for (let i = 0; i < rows.length; i++) {
                if (rows[i].querySelector(`[onclick="removeItem(${tableId})"]`)) {
                    rows[i].remove();
                    break;
                }
            }
            
            updateTotals();
        }

        function updateTotals() {
            calculateTotals();
        }

        function calculateTotals() {
            let totalWeight = 0;
            let totalLabor = 0;
            let totalProfit = 0;
            let totalTax = 0;
            let subtotal = 0;
            
            selectedItems.forEach(item => {
                totalWeight += (item.weight || 0) * item.quantity;
                totalLabor += (item.calculatedLaborCost || 0);
                totalProfit += (item.calculatedProfitCost || 0);
                totalTax += (item.calculatedTaxCost || 0);
                subtotal += item.totalPrice || 0;
            });
            
            const discountAmount = parseFloat(document.getElementById('discount_amount').value) || 0;
            const plasticWeight = parseFloat(document.getElementById('plastic_weight').value) || 0;
            const finalWeight = totalWeight - plasticWeight;
            const grandTotal = subtotal - discountAmount;
            
            document.getElementById('total_weight').value = totalWeight.toFixed(3);
            document.getElementById('total_labor').value = Math.round(totalLabor);
            document.getElementById('total_profit').value = Math.round(totalProfit);
            document.getElementById('total_tax').value = Math.round(totalTax);
            document.getElementById('subtotal').value = Math.round(subtotal);
            document.getElementById('grand_total').value = Math.max(0, Math.round(grandTotal));
            
            // Update hidden input with selected items data
            document.getElementById('selected_items_data').value = JSON.stringify(selectedItems);
        }

        // Update prices when gold rate changes
        document.getElementById('daily_gold_rate').addEventListener('input', function() {
            selectedItems.forEach(item => {
                calculateItemPrice(item.tableId);
            });
            updateTotals();
        });

        function formatNumber(num) {
            return new Intl.NumberFormat('fa-IR').format(num);
        }

        // Toggle invoice type functionality
        function toggleInvoiceType() {
            const invoiceType = document.getElementById('invoice_type').value;
            const pageTitle = document.querySelector('.page-title');
            const formAction = document.getElementById('invoiceForm');
            
            if (invoiceType === 'purchase') {
                pageTitle.textContent = 'صدور فاکتور خرید جدید';
                formAction.action = '/sales/create-purchase';
            } else {
                pageTitle.textContent = 'صدور فاکتور فروش جدید';
                formAction.action = '/sales/create';
            }
        }

        // Load customer financial information
        async function loadCustomerFinancialInfo() {
            const customerId = document.getElementById('customer_id').value;
            const infoDiv = document.getElementById('customer-financial-info');
            
            if (!customerId) {
                infoDiv.style.display = 'none';
                return;
            }
            
            try {
                const response = await fetch(`/api/customer/${customerId}/financial`);
                const data = await response.json();
                
                if (response.ok) {
                    // Update balance display
                    const balanceDisplay = document.getElementById('customer-balance-display');
                    const balanceAmount = document.querySelector('.balance-amount');
                    const balanceStatus = document.querySelector('.balance-status');
                    
                    balanceAmount.textContent = formatNumber(data.currentBalance) + ' ریال';
                    balanceStatus.textContent = data.balanceStatus;
                    
                    // Set appropriate style based on balance type
                    balanceDisplay.className = `balance-display ${data.balanceType}`;
                    
                    // Update totals
                    document.getElementById('customer-total-purchases').textContent = formatNumber(data.totalPurchases) + ' ریال';
                    document.getElementById('customer-total-payments').textContent = formatNumber(data.totalPayments) + ' ریال';
                    
                    // Show the info panel
                    infoDiv.style.display = 'block';
                } else {
                    console.error('Error loading customer info:', data.error);
                    infoDiv.style.display = 'none';
                }
            } catch (error) {
                console.error('Error fetching customer financial info:', error);
                infoDiv.style.display = 'none';
            }
        }

        // Form validation
        document.getElementById('invoiceForm').addEventListener('submit', function(e) {
            if (selectedItems.length === 0) {
                e.preventDefault();
                alert('لطفاً حداقل یک کالا انتخاب کنید.');
                return false;
            }

            // Check if all weights are entered
            const missingWeights = selectedItems.filter(item => !item.weight || item.weight <= 0);
            if (missingWeights.length > 0) {
                e.preventDefault();
                alert('لطفاً وزن تمام کالاها را وارد کنید.');
                return false;
            }

            // Validate Shamsi date
            const shamsiDate = document.getElementById('invoice_date_shamsi').value;
            if (!shamsiToGregorian(shamsiDate)) {
                e.preventDefault();
                alert('لطفاً تاریخ صحیح شمسی وارد کنید (مثال: 1403/01/01)');
                return false;
            }

            return true;
        });
    </script>

    <style>
        .quantity-input, .weight-input, .labor-input, .profit-input, .tax-input {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px;
            text-align: center;
        }
        
        .price-cell {
            font-weight: bold;
            color: #2c5530;
        }
        
        .stock-info {
            color: #666;
            font-size: 0.9em;
        }
        
        .table th {
            background-color: #f8f9fa;
            font-weight: bold;
        }
        
        .card {
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        
        .card-header {
            background-color: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
        }
        
        .card-body {
            padding: 20px;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 4px;
        }
        
        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        /* Customer Financial Info Styles */
        .balance-display {
            padding: 10px;
            border-radius: 6px;
            font-weight: bold;
            text-align: center;
            margin-top: 5px;
        }

        .balance-display.debt {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .balance-display.credit {
            background-color: #d1edff;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .balance-display.clear {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .balance-amount {
            display: block;
            font-size: 1.1em;
            margin-bottom: 3px;
        }

        .balance-status {
            display: block;
            font-size: 0.9em;
            font-weight: normal;
            opacity: 0.8;
        }

        .customer-totals-info {
            font-size: 0.95em;
            line-height: 1.4;
        }

        #customer-financial-info h5 {
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 8px;
        }
    </style>
</body>
</html> 